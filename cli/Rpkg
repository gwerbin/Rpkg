#! Rscript --no-save

get_filename_arg <- function() {
  cli_args <- commandArgs()
  matches <- regexec("^--file=(.+)$", cli_args)

  out <- mapply(function(s, m) {
    if (any(m > 0)) {
      substr(s, m[2], m[2] + attr(m, "match.length")[2])
    } else {
      NA
    }
  }, cli_args, matches)

  out <- out[!is.na(out)]
  if (!length(out)) {
    stop("No '--file=<filename>' option found. Make sure you are using Rscript and not R itself.", call. = FALSE)
  }
  out
}

script_filename <- get_filename_arg()
script_filename <- normalizePath(script_filename, mustWork = TRUE)
script_dir <- dirname(script_filename)

# TODO: make this configurable at "build time" -- CMake?
library_dir <- file.path(script_dir, "library")
#library(optparse, lib.loc = library_dir)
library(Rpkg, lib.loc = library_dir)

rpkg_version <- sprintf("Rpkg version %s", VERSION)

rpkg_help <- sprintf(
"Rpkg version %s

Commands:
    help [ SUBCOMMAND ]
        Get help for SUBCOMMAND.

    ( install | add ) PKG_NAME [ PKG_NAME ... ]
        Install packages. See R help for install.packages().

    ( uninstall | remove ) PKG_NAME [ PKG_NAME ... ]
        Uninstall packages. See R help for remove.packages().

    ( update | upgrade ) ( --all | [ PKG_NAME [ PKG_NAME ... ] ] )
        Update packages. See R help for update.packages(). PKG_NAME is required 
        if --all is not specified.

    reinstall PKG_NAME [ PKG_NAME ... ]
      Remove then reinstall packages.

    outdated
      Print a list of outdated packages.

    list
      Print a list of installed packages.

    info PKG_NAME [ PKG_NAME ... ]
      Print package info from the repository.

    search ( STRING | /REGEX/ )
      Search for a package name in the repository. Regex is PCRE, and is 
      case-sensitive only if it contains an upper-case character.

Options:
    Long options that accept arguments can be specified with
        --option=ARG
    or
        --option ARG
    interchangeably.

    -V
    --version      Print version info and exit.

    -h
    --help         Print this help and exit.

    -v
    --verbose       options(\"verbose\") <- TRUE

    --type=TYPE     options(\"pkgType\") <- $TYPE

    -j NJOBS
    --jobs=[NJOBS]
    --ncpu=[NJOBS]  options(\"Ncpu\") <- $NJOBS
",
VERSION)


# TODO: `help` accepts arguments and prints help info about each subcommand
# TODO: automatically construct help strings?
subcommand_help <- function(...) {
  exit(sysexits$EX_OK, rpkg_help)
}


# TODO: handle arguments platform-independently
# TODO: handle "--" to stop processing option flags?
# TODO: handle "ask = TRUE" (why doesn't it work, anyway?)
# TODO: handle verbosity
# TODO: self-update?
main <- function() {
  # Set a default repo in case users don't have it in .Rprofile
  # TODO: use the CRAN selector dialog like in interactive mode
  repos <- getOption("repos", default = "@CRAN@")
  if (repos == "@CRAN@") {
    options(repos = c(CRAN = "https://cloud.r-project.org"))
  }

  cli_args <- commandArgs(trailingOnly = TRUE)

  if (any(cli_args %in% c("-V", "--version"))) {
    exit(sysexits$EX_OK, rpkg_version)
  }

  if (any(cli_args %in% c("-h", "--help"))) {
    exit(sysexits$EX_OK, rpkg_help)
  }

  opts <- list()

  if (length(i <- grep("(?:^-j)|(?:^--jobs)|(?:^--ncpu)", cli_args))) {
    if (length(i) > 1) {
      warning("Multiple --ncpu options specified; only the last one will be used")
    }
    i <- tail(i, 1)
    if (grepl("^--(?:ncpu|jobs)=(\\S+)", cli_args[i])) {
      opts$Ncpu <- sub("^--(?:ncpu|jobs)=(\\w+)", "\\1", cli_args[i])
      cli_args <- cli_args[-i]
    } else if (i == length(cli_args)) {
      exit(sysexits$EX_, "Missing argument for option -j/--jobs/--ncpu")
    } else {
      opts$ncpu <- cli_args[i+1]
      cli_args <- cli_args[-(c(i,i+1))]
    }
  }

  if (length(i <- grep("^--type", cli_args))) {
    if (length(i) > 1) {
      warning("Multiple --type options specified; only the last one will be used")
    }
    i <- tail(i, 1)
    if (grepl("^--type=(\\S+)", cli_args[i])) {
      opts$type <- sub("^--type=(\\w+)", "\\1", cli_args[i])
      cli_args <- cli_args[-i]
    } else if (i == length(cli_args)) {
      exit(sysexits$EX_, "Missing argument for option --type")
    } else {
      opts$type <- cli_args[i+1]
      cli_args <- cli_args[-(c(i,i+1))]
    }
  }

  # TODO: dump Rpkg options being sent
  if (any(cli_args %in% c("-v", "--verbose"))) {
    opts$verbose <- TRUE
    cli_args <- setdiff(cli_args, c("-v", "--verbose"))
  }

  # TODO: pre-fetch dependencies and confirm before installing, like Conda

  cmd <- cli_args[1]
  pkgs <- cli_args[-1]

  if (cmd %in% c("update", "upgrade") && "--all" %in% pkgs) {
    opts <- opts$all <- TRUE
    pkgs <- setdiff(pkgs, "--all")
  }

  tryCatch(
    switch(
      cmd,
      "install"   = pkg_install(pkgs, opts),
      "add"       = pkg_install(pkgs, opts),

      "update"    = pkg_update(pkgs, opts),
      "upgrade"   = pkg_update(pkgs, opts),

      # TODO: handle pkg names
      "outdated"  = pkg_outdated(NULL, opts),

      "remove"    = pkg_remove(pkgs, opts),
      "uninstall" = pkg_remove(pkgs, opts),

      "reinstall" = pkg_reinstall(pkgs, opts),

      "list"      = pkg_list(NULL, opts),
      "info"      = pkg_info(pkgs, opts),
      "search"    = pkg_search(pkgs, opts),

      "help"      = subcommand_help(cmd),
      `NA`        = exit(sysexits$EX_USAGE, "No command specified. Try `Rpkg help` for instructions."),
      exit(sysexits$EX_USAGE, sprintf("Invalid command: %s", cmd))
    ),
    error = function(err) {
      exit(sysexits$EX_SOFTWARE, paste("Error:", conditionMessage(err)))
    },
    warning = function(wrn) {
      # treat warnings as errors for the purpose of a robust CLI tool
      exit(sysexits$EX_SOFTWARE, paste("Error:", conditionMessage(wrn)))
    }
  )
}

get_terminal_width <- function(default = 80) {
    as.integer(Sys.getenv("COLUMNS", default))
}

if (!interactive()) {
  twidth <- get_terminal_width(200)
  op <- options(width = twidth)
  on.exit(options(op))
  main()
}

# vim: set filetype=r:
